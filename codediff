#!/usr/bin/env python3
""" CodeDiff - A file differencer for use in APCS(P) classes.
    Copyright (C) 2018 Daniel Montgomery

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
"""

__version__ = '0.0.3-develop'

__author__ = 'Daniel Montgomery'
__copyright__ = 'Copyright (C) 2018 Daniel Montgomery'
__credits__ = ['Daniel Montgomery', 'Cole Mediratta', 'Blake Sanie']
__license__ = 'GPLv3'

import argparse
import logging
import sys
import subprocess
import textwrap
from src import logger
from src.scraper import CanvasScraper
from src.parser import PathParser, parsesnapfiles, parsefiles
from src.matcher import SnapMatcher, SequenceMatcher
from src.validators import SnapPathValidator, HtmlPathValidator, JavaPathValidator
from src.utils import FileError, NotEnoughFilesError, FileIOError, sdv


if 'develop' in __version__:
    p = subprocess.Popen(['git', 'rev-parse', 'HEAD'], stdout=subprocess.PIPE)
    resp, retcode = p.communicate()
    if retcode is None:
        __version__ += ' ({})'.format(resp.rstrip().decode('ascii'))


class LicenseAction(argparse.Action):
    def __init__(self, option_strings, dest=argparse.SUPPRESS,
                 default=argparse.SUPPRESS,
                 help='Show codediff\'s license and exit'):
        super(LicenseAction, self).__init__(option_strings=option_strings,
                                            dest=dest,
                                            default=default,
                                            nargs=0,
                                            help=help)

    def __call__(self, parser, namespace, values, option_string=None):
        try:
            with open('LICENSE', 'r') as cdlicense:
                for line in cdlicense:
                    # We can't use logger here because it is yet to be defined
                    parser._print_message(line, sys.stdout)
        except FileNotFoundError:
            parser._print_message('Couldn\'t find LICENSE, but you can still ', sys.stdout)
            parser._print_message('read it here: https://www.gnu.org/licenses/gpl-3.0.txt\n', sys.stdout)
        finally:
            parser.exit()


def print_results(sim, logger):
    for file_pair, ratio in sdv(sim):
        logger.info('%s - %d%% similar', file_pair, round(float(ratio)*100, 1))
    logger.debug('Found following ratios: %s', sim)

if __name__ == '__main__':
    # Initalizes argparser
    argparser = argparse.ArgumentParser(prog='codediff',
                                        description='A file differencer for use in APCS(P) classes.',
                                        formatter_class=argparse.RawDescriptionHelpFormatter,
                                        epilog=textwrap.indent(textwrap.dedent('''\
                                        codediff  Copyright (C)  2018  Daniel Montgomery
                                        This program comes with ABSOLUTELY NO WARRANTY;
                                        This is free software, and you are welcome to redistribute it
                                        under certain conditions; type `--license` for details.
                                        '''), 4 * ' '))
    argparser.add_argument('input_files', nargs='+',
                           help='input files for codediff. Can be files and/or directories')
    argparser.add_argument('-V', '--version', action='version', version='codediff v' + __version__)
    argparser.add_argument('-l', '--license', action=LicenseAction)
    verbose_group = argparser.add_mutually_exclusive_group()
    verbose_group.add_argument('-q', '--quiet', help='Only output results',
                               action='store_const', dest='log_level', const=logging.ERROR)
    # Currently, verbosity does nothing.
    verbose_group.add_argument('-v', '--verbose',
                               help='increase output verbosity',
                               action='store_const', dest='log_level', const=logging.INFO)
    verbose_group.add_argument('-d', '--debug', help='Print debug statements for developers',
                               action='store_const', dest='log_level', const=logging.DEBUG)
    args = argparser.parse_args()

    # Init verbose and logging facilities.
    _logger = logger.init_logger(args.log_level or logging.INFO)

    # Run the program.
    try:
        failed_paths = []

        # First we parse the paths.
        _logger.debug('Creating PathParser instances...')
        snap_parsed_paths = PathParser(args.input_files, SnapPathValidator()).parse()
        java_parsed_paths = PathParser(list(filter(lambda x : x not in snap_parsed_paths, args.input_files)),
                                        JavaPathValidator()).parse()
        canvas_parsed_paths = PathParser(list(filter(lambda x : x not in snap_parsed_paths
                                                        and x not in java_parsed_paths, args.input_files)),
                                            HtmlPathValidator()).parse()
        if canvas_parsed_paths:
            # Then we scrape the canvas html files if they exist.
            _logger.debug('Creating CanvasScraper instance.')
            scraper = CanvasScraper(canvas_parsed_paths)
            _logger.debug('Scraping files.')
            scraper.parse_html()
            canvas_paths = scraper.scrape()
            # Next we add all the scraped files to the compare.
            # TODO: scrape java as well
            snap_parsed_paths += canvas_paths['succeeded']
            failed_paths += canvas_paths['failed']

        # We check that there are enough files.
        if len(snap_parsed_paths) < 2 and len(java_parsed_paths) < 2:
            raise NotEnoughFilesError('Expecting at least two xml files but found less than two.')

        # Finally we compare all the files.
        _logger.debug('Computing compare...')
        snap_sim = {}
        # Comparing snap files
        if snap_parsed_paths:
            parsed_files = parsesnapfiles(snap_parsed_paths)
            failed_paths += parsed_files['failed']
            for _, file_pair in parsed_files['succeeded'].items():
                snap_sim[file_pair] = SnapMatcher(file_pair.a, file_pair.b).compare()
            _logger.info('\n')

        java_sim = {}
        # Comparing java files
        if java_parsed_paths:
            parsed_files = parsefiles(java_parsed_paths)
            failed_paths += parsed_files['failed']
            for _, file_pair in parsed_files['succeeded'].items():
                java_sim[file_pair] = SequenceMatcher(file_pair.a, file_pair.b).compare()
            _logger.info('\n')

        # Then we sort and print the result and and errors that may have occurred.
        print_results(snap_sim, _logger)
        print_results(java_sim, _logger)

        if failed_paths:
            _logger.info('Failed to read the following files: %s', failed_paths)

    except (FileError, FileIOError) as e:
        argparser.error(str(e))
    except Exception:
        _logger.exception('Oh noes! :( An exception has occurred.')
